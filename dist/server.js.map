{"version":3,"sources":["../.yarn/cache/object-assign-npm-4.1.1-1004ad6dec-1f4df99451.zip/node_modules/object-assign/index.js","../.yarn/cache/vary-npm-1.1.2-b49f70ae63-f15d588d79.zip/node_modules/vary/index.js","../.yarn/cache/cors-npm-2.8.5-c9935a2d12-373702b799.zip/node_modules/cors/lib/index.js","../src/server.ts","../src/libs/pg.ts","../src/error/not-found.ts","../src/error/error.ts","../src/middleware/token-middleware.ts","../src/route/employee-route.ts","../src/helper/async-helper.ts","../src/controller/employee-controller.ts","../src/services/employee-service.ts","../src/middleware/validation-middleware.ts","../src/schema/user-schema.ts","../src/route/task-route.ts","../src/controller/task-controller.ts","../src/services/task-service.ts","../src/schema/task-schema.ts","../src/route/profile-route.ts","../src/services/profile-service.ts","../src/controller/profile-controller.ts","../src/route/chart-route.ts","../src/controller/chart-controller.ts","../src/services/chart-service.ts","../src/route/auth-route.ts","../src/controller/auth-controller.ts","../src/services/auth-service.ts","../src/route/absence-route.ts","../src/controller/absence-controller.ts","../src/services/absence-service.ts","../src/schema/absence-schema.ts","../src/route/project-route.ts","../src/controller/project-controller.ts","../src/services/project-service.ts","../src/route/role-route.ts","../src/controller/role-controller.ts","../src/services/role-service.ts"],"sourcesContent":["/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/*!\n * vary\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n */\n\nmodule.exports = vary\nmodule.exports.append = append\n\n/**\n * RegExp to match field-name in RFC 7230 sec 3.2\n *\n * field-name    = token\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n */\n\nvar FIELD_NAME_REGEXP = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/\n\n/**\n * Append a field to a vary header.\n *\n * @param {String} header\n * @param {String|Array} field\n * @return {String}\n * @public\n */\n\nfunction append (header, field) {\n  if (typeof header !== 'string') {\n    throw new TypeError('header argument is required')\n  }\n\n  if (!field) {\n    throw new TypeError('field argument is required')\n  }\n\n  // get fields array\n  var fields = !Array.isArray(field)\n    ? parse(String(field))\n    : field\n\n  // assert on invalid field names\n  for (var j = 0; j < fields.length; j++) {\n    if (!FIELD_NAME_REGEXP.test(fields[j])) {\n      throw new TypeError('field argument contains an invalid header name')\n    }\n  }\n\n  // existing, unspecified vary\n  if (header === '*') {\n    return header\n  }\n\n  // enumerate current values\n  var val = header\n  var vals = parse(header.toLowerCase())\n\n  // unspecified vary\n  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {\n    return '*'\n  }\n\n  for (var i = 0; i < fields.length; i++) {\n    var fld = fields[i].toLowerCase()\n\n    // append value (case-preserving)\n    if (vals.indexOf(fld) === -1) {\n      vals.push(fld)\n      val = val\n        ? val + ', ' + fields[i]\n        : fields[i]\n    }\n  }\n\n  return val\n}\n\n/**\n * Parse a vary header into an array.\n *\n * @param {String} header\n * @return {Array}\n * @private\n */\n\nfunction parse (header) {\n  var end = 0\n  var list = []\n  var start = 0\n\n  // gather tokens\n  for (var i = 0, len = header.length; i < len; i++) {\n    switch (header.charCodeAt(i)) {\n      case 0x20: /*   */\n        if (start === end) {\n          start = end = i + 1\n        }\n        break\n      case 0x2c: /* , */\n        list.push(header.substring(start, end))\n        start = end = i + 1\n        break\n      default:\n        end = i + 1\n        break\n    }\n  }\n\n  // final token\n  list.push(header.substring(start, end))\n\n  return list\n}\n\n/**\n * Mark that a request is varied on a header field.\n *\n * @param {Object} res\n * @param {String|Array} field\n * @public\n */\n\nfunction vary (res, field) {\n  if (!res || !res.getHeader || !res.setHeader) {\n    // quack quack\n    throw new TypeError('res argument is required')\n  }\n\n  // get existing header\n  var val = res.getHeader('Vary') || ''\n  var header = Array.isArray(val)\n    ? val.join(', ')\n    : String(val)\n\n  // set new header\n  if ((val = append(header, field))) {\n    res.setHeader('Vary', val)\n  }\n}\n","(function () {\n\n  'use strict';\n\n  var assign = require('object-assign');\n  var vary = require('vary');\n\n  var defaults = {\n    origin: '*',\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n    preflightContinue: false,\n    optionsSuccessStatus: 204\n  };\n\n  function isString(s) {\n    return typeof s === 'string' || s instanceof String;\n  }\n\n  function isOriginAllowed(origin, allowedOrigin) {\n    if (Array.isArray(allowedOrigin)) {\n      for (var i = 0; i < allowedOrigin.length; ++i) {\n        if (isOriginAllowed(origin, allowedOrigin[i])) {\n          return true;\n        }\n      }\n      return false;\n    } else if (isString(allowedOrigin)) {\n      return origin === allowedOrigin;\n    } else if (allowedOrigin instanceof RegExp) {\n      return allowedOrigin.test(origin);\n    } else {\n      return !!allowedOrigin;\n    }\n  }\n\n  function configureOrigin(options, req) {\n    var requestOrigin = req.headers.origin,\n      headers = [],\n      isAllowed;\n\n    if (!options.origin || options.origin === '*') {\n      // allow any origin\n      headers.push([{\n        key: 'Access-Control-Allow-Origin',\n        value: '*'\n      }]);\n    } else if (isString(options.origin)) {\n      // fixed origin\n      headers.push([{\n        key: 'Access-Control-Allow-Origin',\n        value: options.origin\n      }]);\n      headers.push([{\n        key: 'Vary',\n        value: 'Origin'\n      }]);\n    } else {\n      isAllowed = isOriginAllowed(requestOrigin, options.origin);\n      // reflect origin\n      headers.push([{\n        key: 'Access-Control-Allow-Origin',\n        value: isAllowed ? requestOrigin : false\n      }]);\n      headers.push([{\n        key: 'Vary',\n        value: 'Origin'\n      }]);\n    }\n\n    return headers;\n  }\n\n  function configureMethods(options) {\n    var methods = options.methods;\n    if (methods.join) {\n      methods = options.methods.join(','); // .methods is an array, so turn it into a string\n    }\n    return {\n      key: 'Access-Control-Allow-Methods',\n      value: methods\n    };\n  }\n\n  function configureCredentials(options) {\n    if (options.credentials === true) {\n      return {\n        key: 'Access-Control-Allow-Credentials',\n        value: 'true'\n      };\n    }\n    return null;\n  }\n\n  function configureAllowedHeaders(options, req) {\n    var allowedHeaders = options.allowedHeaders || options.headers;\n    var headers = [];\n\n    if (!allowedHeaders) {\n      allowedHeaders = req.headers['access-control-request-headers']; // .headers wasn't specified, so reflect the request headers\n      headers.push([{\n        key: 'Vary',\n        value: 'Access-Control-Request-Headers'\n      }]);\n    } else if (allowedHeaders.join) {\n      allowedHeaders = allowedHeaders.join(','); // .headers is an array, so turn it into a string\n    }\n    if (allowedHeaders && allowedHeaders.length) {\n      headers.push([{\n        key: 'Access-Control-Allow-Headers',\n        value: allowedHeaders\n      }]);\n    }\n\n    return headers;\n  }\n\n  function configureExposedHeaders(options) {\n    var headers = options.exposedHeaders;\n    if (!headers) {\n      return null;\n    } else if (headers.join) {\n      headers = headers.join(','); // .headers is an array, so turn it into a string\n    }\n    if (headers && headers.length) {\n      return {\n        key: 'Access-Control-Expose-Headers',\n        value: headers\n      };\n    }\n    return null;\n  }\n\n  function configureMaxAge(options) {\n    var maxAge = (typeof options.maxAge === 'number' || options.maxAge) && options.maxAge.toString()\n    if (maxAge && maxAge.length) {\n      return {\n        key: 'Access-Control-Max-Age',\n        value: maxAge\n      };\n    }\n    return null;\n  }\n\n  function applyHeaders(headers, res) {\n    for (var i = 0, n = headers.length; i < n; i++) {\n      var header = headers[i];\n      if (header) {\n        if (Array.isArray(header)) {\n          applyHeaders(header, res);\n        } else if (header.key === 'Vary' && header.value) {\n          vary(res, header.value);\n        } else if (header.value) {\n          res.setHeader(header.key, header.value);\n        }\n      }\n    }\n  }\n\n  function cors(options, req, res, next) {\n    var headers = [],\n      method = req.method && req.method.toUpperCase && req.method.toUpperCase();\n\n    if (method === 'OPTIONS') {\n      // preflight\n      headers.push(configureOrigin(options, req));\n      headers.push(configureCredentials(options, req));\n      headers.push(configureMethods(options, req));\n      headers.push(configureAllowedHeaders(options, req));\n      headers.push(configureMaxAge(options, req));\n      headers.push(configureExposedHeaders(options, req));\n      applyHeaders(headers, res);\n\n      if (options.preflightContinue) {\n        next();\n      } else {\n        // Safari (and potentially other browsers) need content-length 0,\n        //   for 204 or they just hang waiting for a body\n        res.statusCode = options.optionsSuccessStatus;\n        res.setHeader('Content-Length', '0');\n        res.end();\n      }\n    } else {\n      // actual response\n      headers.push(configureOrigin(options, req));\n      headers.push(configureCredentials(options, req));\n      headers.push(configureExposedHeaders(options, req));\n      applyHeaders(headers, res);\n      next();\n    }\n  }\n\n  function middlewareWrapper(o) {\n    // if options are static (either via defaults or custom options passed in), wrap in a function\n    var optionsCallback = null;\n    if (typeof o === 'function') {\n      optionsCallback = o;\n    } else {\n      optionsCallback = function (req, cb) {\n        cb(null, o);\n      };\n    }\n\n    return function corsMiddleware(req, res, next) {\n      optionsCallback(req, function (err, options) {\n        if (err) {\n          next(err);\n        } else {\n          var corsOptions = assign({}, defaults, options);\n          var originCallback = null;\n          if (corsOptions.origin && typeof corsOptions.origin === 'function') {\n            originCallback = corsOptions.origin;\n          } else if (corsOptions.origin) {\n            originCallback = function (origin, cb) {\n              cb(null, corsOptions.origin);\n            };\n          }\n\n          if (originCallback) {\n            originCallback(req.headers.origin, function (err2, origin) {\n              if (err2 || !origin) {\n                next(err2);\n              } else {\n                corsOptions.origin = origin;\n                cors(corsOptions, req, res, next);\n              }\n            });\n          } else {\n            next();\n          }\n        }\n      });\n    };\n  }\n\n  // can pass either an options hash, an options delegate, or nothing\n  module.exports = middlewareWrapper;\n\n}());\n","import 'dotenv/config'\nrequire('dotenv').config()\n\nimport express from \"express\";\n\nimport cors from \"cors\"\nimport helmet from \"helmet\";\nimport db from \"./libs/pg\"\nimport { notFoundHandler } from \"./error/not-found\";\nimport { errorHandler } from \"./error/error\";\nimport { verifyToken } from './middleware/token-middleware';\nimport cookieParser from 'cookie-parser';\nimport {\n  absenceRoute,\n  authRouter,\n  chartRouter,\n  employeeRouter,\n  profileRoute,\n  projectRoute,\n  roleRoute,\n  taskRouter\n} from './route';\n\nconst asyncHandler = async () => {\n  await db.connect()\n  const app = express();\n  const PORT = process.env.PORT || 8080;\n\n  app.use(cookieParser())\n  app.use(helmet());\n  app.use(cors());\n\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }))\n\n  app.use(express.static('public'));\n\n  app.use('/api/auth/', authRouter)\n  app.use('/api/employees/', employeeRouter)\n  app.use('/api/tasks/', taskRouter)\n  app.use('/api/charts/', verifyToken, chartRouter)\n  // app.use('/api/profiles/', verifyToken, profileRoute)\n  app.use('/api/absences/', verifyToken, absenceRoute)\n  app.use('/api/projects/', projectRoute)\n  app.use('/api/roles/', roleRoute)\n\n  app.use(notFoundHandler);\n  app.use(errorHandler);\n\n  app.listen(PORT, () =>\n    console.log(`Server is running on http://localhost/${PORT}`)\n  );\n\n}\n\nvoid asyncHandler()\n","import { Client, Pool, QueryResult, QueryResultRow } from 'pg';\n\nlet client: Pool | null = null;\n\n\n\nconst connect = async (): Promise<void> => {\n  console.log(\"Connecting to DB\");\n\n  client = new Pool({\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    host: process.env.DB_HOST,\n    port: Number(process.env.DB_PORT),\n    database: process.env.DB_NAME,\n  });\n\n  try {\n    await client.query(\"SELECT 1+1\");\n    // await client.connect();\n    console.log(\"Connected to DB\");\n  } catch (error) {\n    console.error(\"Failed to connect to DB\", error);\n    throw error;\n  }\n};\n\nexport const query = async <TResult = any>(sql: string, params?: any[], log = process.env.LOG): Promise<QueryResult<TResult> | undefined> => {\n  if (client) {\n    try {\n      if (log) {\n        console.log(sql, JSON.stringify(params));\n      }\n      return await client.query<TResult>(sql, params);\n    } catch (error) {\n      console.error(\"Query failed\", error);\n      throw new Error(\"Database Error\");\n    }\n  }\n  console.log(\"Not connected to DB\");\n  return undefined;\n};\n\nconst disconnect = async (): Promise<void> => {\n  if (client) {\n    console.log(\"Disconnecting from DB\");\n    try {\n      await client.end();\n      console.log(\"Disconnected from DB\");\n    } catch (error) {\n      console.error(\"Failed to disconnect from DB\", error);\n      throw error;\n    }\n  } else {\n    console.log(\"Not connected to DB\");\n  }\n};\n\nexport default { connect, disconnect };\n\n\n\n\n// import { Pool, PoolConfig, QueryResult } from \"pg\";\n\n// const poolConfig: PoolConfig = {\n//    user: process.env.DB_USER,\n//     password:  process.env.DB_PASSWORD,\n//     host: process.env.DB_HOST,\n//     port: Number(process.env.DB_PORT),\n//     database: process.env.DB_NAME,\n// }\n\n// const pool = new Pool(poolConfig);\n\n// export const query = async (query: string, params?: any[]): Promise<QueryResult<any> | undefined> => {\n//   try{\n//     return await pool.query(query, params);\n//   } catch (error) {\n//     console.log(\"Query failed:\", error);\n//     return undefined\n//   }\n// }\n\n// const disconnect = async (): Promise<void> => {\n//   try {\n//     console.log(\"Disconnecting from DB\");\n//     await pool.end();\n//     console.log(\"Disconnected from DB\");\n//   } catch (error) {\n//     console.error(\"Failed to disconnect from DB:\", error);\n//   }\n// }\n\n// export default {disconnect}","import { Request, Response } from \"express\";\nimport { ErrorResponse } from \"../types\";\nimport { StatusCodes } from \"http-status-codes\";\n\nexport const notFoundHandler = (req: Request, res: Response) => {\n  const response: ErrorResponse = {\n    status: StatusCodes.NOT_FOUND,\n    message: `Not found: ${req.originalUrl}`\n  }\n\n  res.status(404).json(response);\n};\n","import { NextFunction, Request, Response } from \"express\";\nimport { ErrorResponse } from \"../types\";\nimport { StatusCodes } from \"http-status-codes\";\n\nexport const errorHandler = (error: Error, req: Request, res: Response, next: NextFunction): any => {\n  const response: ErrorResponse = {\n    status: StatusCodes.INTERNAL_SERVER_ERROR,\n    message: error.message\n  }\n\n  console.log(error);\n\n  return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(response);\n};\n","// import { Request, Response, NextFunction } from 'express';\n// import jwt from 'jsonwebtoken';\n\n\n// export const verifyToken = (req: Request, res: Response, next: NextFunction) => {\n\n//   if (!token) {\n//     throw new Error(\"No token provided\")\n//   }\n\n//   try {\n//     const decoded = jwt.verify(token, 'test');\n//     req.user = decoded.user;\n//     next();\n//   } catch (error) {\n//     throw new Error(\"Invalid token\")\n//   }\n// };\n\nimport { Request, Response, NextFunction } from 'express';\nimport jwt, { JwtPayload } from 'jsonwebtoken';\nimport { query } from '../libs/pg';\nimport { Employee } from '../types';\n\nexport const verifyToken = async (req: Request, res: Response, next: NextFunction) => {\n  // Mengambil token dari header Authorization\n  const authHeader = req.headers.authorization;\n\n  if (!authHeader) {\n    return res.status(401).json({ message: 'No token provided' });\n  }\n\n  const token = authHeader\n\n  if (!token) {\n    return res.status(401).json({ message: 'No token provided' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, 'test') as JwtPayload & { user: Employee };\n    const { user } = decoded;\n\n    const checkQuery = await query<{ id: number; }>(\n      `\n    SELECT id\n    FROM public.\"users\"\n    WHERE email=$1\n    `,\n      [user.email]\n    )\n\n    if (checkQuery?.rowCount === 0) {\n      return res.status(401).json({ message: 'User does not exist' });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(401).json({ message: 'Invalid token' });\n  }\n};","import express from \"express\";\nimport { createEmployee, deleteEmployee, getAllEmployees, getAllEmployessClient, getEmployeeById, updateEmployee } from \"../controller/employee-controller\";\nimport { validateData } from \"../middleware/validation-middleware\";\nimport { CreateUserSchema, UpdateUserProfileSchema } from \"../schema/user-schema\";\nconst route = express.Router();\n\nroute.get('/', getAllEmployees);\nroute.get('/client', getAllEmployessClient);\nroute.post('/', validateData(CreateUserSchema), createEmployee);\nroute.delete('/:user_id', deleteEmployee);\nroute.get('/:user_id', getEmployeeById);\nroute.put('/:user_id?', validateData(UpdateUserProfileSchema), updateEmployee);\n\nexport default route;","import { NextFunction, Request, Response } from \"express\";\n\ntype AsyncHandlerFunction = (req: Request, res: Response) => Promise<any>;\n\nexport const asyncHandler = (asyncFnc: AsyncHandlerFunction) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(asyncFnc(req, res)).catch(next);\n  };\n};\n","import { Request, Response } from \"express\";\nimport { asyncHandler } from \"../helper/async-helper\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { Employee, ErrorResponse, SuccessResponse } from \"../types\";\nimport EmployeeService from \"../services/employee-service\";\n\n\ntype EmployeeResponse<TData> = Response<SuccessResponse<TData> | ErrorResponse>\ntype EmployeeRequest = Request<{ user_id: number }, any, Employee, {\n  search: string;\n  limit: string;\n  page: string;\n}>\n\nexport const getAllEmployessClient = asyncHandler(async (req: EmployeeRequest, res: EmployeeResponse<Employee[]>) => {\n  const test = await EmployeeService.GET_ALL();\n\n  res.json(test)\n})\n\n// @desc  Get all users\n// @route GET /api/employees\nexport const getAllEmployees = asyncHandler(async (req: EmployeeRequest, res: EmployeeResponse<any>) => {\n  const defaultLimit = 10;\n  const defaultPage = 1;\n\n  const limit: number = parseInt(req.query.limit, 10) || defaultLimit;\n  const currentPage: number = parseInt(req.query.page, 10) || defaultPage;\n  const searchStr: string | undefined = req.query.search;\n\n  const result = await EmployeeService.GET_ALL(\n    limit,\n    currentPage,\n    searchStr\n  )\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    data: result\n  });\n});\n\n// @desc  Get user by id\n// @route GET /api/employees:user_id\nexport const getEmployeeById = asyncHandler(async (req: EmployeeRequest, res: EmployeeResponse<Employee>) => {\n  const result = await EmployeeService.GET_BY_ID(req.params.user_id)\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    data: result\n  });\n});\n\n// @desc  Delete a user\n// @route DELETE /api/employees:user_id\nexport const deleteEmployee = asyncHandler(async (req: Request, res: EmployeeResponse<null>) => {\n  await EmployeeService.DELETE(\n    Number(req.params.user_id)\n  )\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    message: `Employee has been successfully deleted`,\n  });\n})\n\n// @desc Create a user\n// @route POST /api/employees\nexport const createEmployee = asyncHandler(async (req: EmployeeRequest, res: EmployeeResponse<Employee>) => {\n  const result = await EmployeeService.STORE(req.body)\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.CREATED,\n    success: true,\n    message: `User is created successfully`,\n    data: result\n  });\n})\n\n// @desc Update Current User Profile\n// @route PUT /api/employees\nexport const updateEmployee = asyncHandler(async (req: EmployeeRequest, res: EmployeeResponse<Employee>) => {\n  const user_id = Number(req.params.user_id);\n\n  const result = await EmployeeService.UPDATE(user_id, req.body)\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    message: `User updated successfully`,\n    data: result\n  });\n})","import { query } from \"../libs/pg\";\nimport { Employee } from \"../types\";\n\nclass EmployeeService {\n  static GET_ALL = async (\n    limit: number,\n    currentPage: number,\n    searchStr?: string,\n  ): Promise<{\n    totalItems: number;\n    employees: Employee[] | undefined;\n    totalPages: number;\n    currentPage: number;\n    limit?: number;\n    search?: string | null;\n    rowPerPages: number[];\n  }> => {\n    const whereClauses: any[] = []\n    const queryParams: any[] = []\n    let limitQuery: string = '';\n    let offsetQuery: string = '';\n\n    if (searchStr) {\n      whereClauses.push(`u::text ILIKE $${queryParams.length + 1} OR r::text ILIKE $${queryParams.length + 1}`)\n      queryParams.push(`%${searchStr}%`)\n    }\n\n    limitQuery = `LIMIT $${queryParams.length + 1}`;\n    queryParams.push(limit);\n\n    offsetQuery = `OFFSET $${queryParams.length + 1}`;\n    queryParams.push((currentPage - 1) * limit);\n\n    const whereClause = whereClauses.length > 0 ? ' WHERE ' + whereClauses.join(' AND ') : '';\n\n    const queryString = `\n      SELECT u.id, u.email, u.full_name AS name, u.phone, r.display_name AS role\n      FROM users u \n      LEFT JOIN roles r ON u.role_id = r.id\n      ${whereClause}\n      ORDER BY u.id ASC\n      ${limitQuery}\n      ${offsetQuery}\n    `;\n\n    const countQueryString = `\n      SELECT COUNT(*) AS total \n      FROM users u \n      LEFT JOIN roles r ON u.role_id = r.id \n      ${whereClause}\n    `;\n\n    const result = await query<Employee>(queryString, queryParams)\n    const countResult = await query<{ total: number }>(countQueryString, searchStr ? [queryParams[0]] : []);\n\n    const totalRecords = Number(countResult?.rows[0]?.total || 0);\n    const totalPages = Math.ceil(totalRecords / limit);\n\n    return {\n      totalItems: totalRecords,\n      totalPages: totalPages,\n      currentPage: currentPage,\n      limit,\n      search: searchStr || null,\n      rowPerPages: [5, 10, 15],\n      employees: result?.rows,\n    }\n  }\n\n  static GET_BY_ID = async (employeeId: number): Promise<Employee | undefined> => {\n    const fethUserInfoByIdResult = await query<Employee>(`\n    SELECT\n      u.*, \n      r.display_name AS role\n    FROM public.\"users\" u\n    LEFT JOIN roles r ON u.role_id = r.id\n    WHERE u.id = $1::integer\n    `, [employeeId])\n\n    return fethUserInfoByIdResult?.rows.at(0)\n  }\n\n  static DELETE = async (employeeId: number): Promise<void> => {\n    await query(`\n      DELETE FROM public.\"users\" \n      WHERE id=$1::integer\n    `, [employeeId])\n  }\n\n  static STORE = async (employee: Employee): Promise<Employee | undefined> => {\n    const { email, full_name, username, password, phone, role_id } = employee\n\n    const storeEmployeeResult = await query<Employee>(`\n    INSERT INTO public.\"users\" (\n      email,\n      full_name,\n      username,\n      password,\n      role_id,\n      phone\n    ) VALUES ($1, $2, $3, $4, $5::integer, $6) \n    RETURNING *\n    `, [email, full_name, username, password, role_id, phone])\n\n    return storeEmployeeResult?.rows.at(0)\n  }\n\n  static UPDATE = async (employee_id: number, employee: Employee): Promise<Employee | undefined> => {\n    const { email, full_name, username, password, phone, role_id } = employee\n\n    const updateEmployeeResult = await query<Employee>(`\n    UPDATE public.\"users\"\n    SET \n      email=$1, \n      full_name=$2, \n      username=$3, \n      password=$4, \n      role_id=$5::integer,\n      phone=$6\n    WHERE id=$7::integer \n    RETURNING *\n    `, [email, full_name, username, password, role_id, phone, employee_id])\n\n    return updateEmployeeResult?.rows.at(0)\n  }\n}\n\nexport default EmployeeService","import { Request, Response, NextFunction } from 'express';\nimport { z, ZodError } from 'zod';\n\nimport { StatusCodes } from 'http-status-codes';\nimport { ErrorResponse } from '../types';\nimport { query } from '../libs/pg';\n\nconst validateData = (schema: z.ZodObject<any, any>) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    try {\n      schema.parse(req.body);\n      next();\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const errorMessages = error.errors.reduce((acc: any, issue: any) => {\n          acc[issue.path.join('.')] = issue.message;\n          return acc;\n        }, {});\n\n        const errorResponse: ErrorResponse = {\n          status: StatusCodes.BAD_REQUEST,\n          message: errorMessages\n        }\n\n        res.status(StatusCodes.BAD_REQUEST).json(errorResponse);\n      } else {\n        res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: 'Internal Server Error' });\n      }\n    }\n  };\n}\n\nexport {\n  validateData,\n}","import { z } from \"zod\"\n\nexport const CreateUserSchema = z.object({\n  email: z.string({ message: \"The email field is required\" })\n    .email({ message: \"Please provide a valid email address\" })\n    .min(1, { message: \"The email field cannot be empty\" })\n    .max(100, { message: \"The email address cannot exceed 100 characters\" }),\n\n  password: z.string({ message: \"The password field is required\" })\n    .min(1, { message: \"The password field cannot be empty\" })\n    .max(100, { message: \"The password cannot exceed 100 characters\" }),\n\n  full_name: z.string({ message: \"The full name field is required\" })\n    .min(1, { message: \"The full name field cannot be empty\" })\n    .max(100, { message: \"The full name cannot exceed 100 characters\" }),\n\n  username: z.string({ message: \"The username field is required\" })\n    .min(1, { message: \"The username field cannot be empty\" })\n    .max(100, { message: \"The username cannot exceed 100 characters\" }),\n\n  role_id: z.number({ message: \"The role ID field is required\" })\n    .min(1, { message: \"Role ID must be at least 1\" })\n});\n\nexport const UpdateUserProfileSchema = z.object({\n  email: z.string({ message: \"The email field is required\" })\n    .email({ message: \"Please provide a valid email address\" })\n    .min(1, { message: \"The email field cannot be empty\" })\n    .max(100, { message: \"The email address cannot exceed 100 characters\" }),\n\n  password: z.string({ message: \"The password field is required\" })\n    .min(1, { message: \"The password field cannot be empty\" })\n    .max(100, { message: \"The password cannot exceed 100 characters\" }),\n\n  full_name: z.string({ message: \"The full name field is required\" })\n    .min(1, { message: \"The full name field cannot be empty\" })\n    .max(100, { message: \"The full name cannot exceed 100 characters\" }),\n\n  username: z.string({ message: \"The username field is required\" })\n    .min(1, { message: \"The username field cannot be empty\" })\n    .max(100, { message: \"The username cannot exceed 100 characters\" }),\n});","import express from \"express\"\nimport { deleteTask, getTaskByUserId, saveTask } from \"../controller/task-controller\";\nimport { validateData } from \"../middleware/validation-middleware\";\nimport { taskDataSchema } from \"../schema/task-schema\";\nconst route = express.Router();\n\nroute.post('/', validateData(taskDataSchema), saveTask)\nroute.get('/', getTaskByUserId)\nroute.delete('/:task_id', deleteTask)\n\nexport default route","import { Request, Response } from \"express\";\nimport { query } from \"../libs/pg\";\nimport { ErrorResponse, SuccessResponse, Task } from \"../types\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { asyncHandler } from \"../helper/async-helper\";\nimport TaskService from \"../services/task-service\";\n\ntype TaskRequest = Request<{}, SuccessResponse<Task[]>, {\n  data: Task[]\n}>\n\n// @desc  Save a new task\n// @route POST /api/tasks/\nexport const saveTask = asyncHandler(async (req: TaskRequest, res: Response) => {\n  const tasks = req.body.data;\n  const user_id = req.user?.id;\n\n  if (!user_id) {\n    return res.status(400).json({\n      status: 400,\n      message: `User id is not specified`\n    } as ErrorResponse)\n  }\n\n  const result = await TaskService.STORE(user_id, tasks)\n\n  const successResponse: SuccessResponse<Task[]> = {\n    status: StatusCodes.CREATED,\n    success: true,\n    message: `Report created succesfully for user ${user_id}`,\n    data: result\n  }\n\n  res.status(StatusCodes.OK).json(successResponse)\n})\n\n// @desc  Get all tasks for a certain user\n// @route GET /api/tasks/\nexport const getTaskByUserId = asyncHandler(async (req: TaskRequest, res: Response) => {\n  const employee_id = req.user?.id;\n\n  if (!employee_id) {\n    return res.status(400).json({\n      status: 400,\n      message: `User id is not specified`\n    } as ErrorResponse)\n  }\n  // const user_id = 126\n\n  const result = await TaskService.GET_BY_EMPLOYEE_ID(employee_id);\n\n  const successResponse: SuccessResponse<any> = {\n    status: StatusCodes.OK,\n    success: true,\n    data: result\n  };\n\n  res.status(StatusCodes.OK).json(successResponse);\n});\n\n// @desc  Delete a task\n// @route DELETE /api/tasks/:task_id\nexport const deleteTask = asyncHandler(async (req: Request, res: Response) => {\n  const task_id = Number(req.params.task_id);\n\n  await TaskService.DELETE(task_id)\n\n  const successResponse: SuccessResponse<any> = {\n    status: StatusCodes.OK,\n    success: true,\n    message: `Task with id ${task_id} has been deleted`\n  }\n\n  res.status(StatusCodes.OK).json(successResponse)\n})\n\n","import { query } from \"../libs/pg\"\nimport { Task } from \"../types\"\n\nclass TaskService {\n  static GET_ALL = async (): Promise<Task[]> => {\n    const fetchTaskResult = await query<Task>(`\n    SELECT\n      t.id,\n      t.task,\n      u.full_name,\n      t.start,\n      t.\"end\",\n      p.project_name\n    FROM tasks t\n    JOIN users u ON t.user_id=u.id\n    JOIN projects p ON t.project_id=p.id\n    ORDER BY start, \"end\" ASC\n    `)\n\n    return fetchTaskResult?.rows || []\n  }\n\n  static GET_BY_ID = async (task_id: number): Promise<Task | undefined> => {\n    const fetchTaskResult = await query<Task>(`\n    SELECT\n      t.id,\n      t.task,\n      u.full_name,\n      t.start,\n      t.\"end\",\n      p.project_name\n    FROM tasks t\n    JOIN users u ON t.user_id=u.id\n    JOIN projects p ON t.project_id=p.id\n    WHERE t.id=$1::integer\n    ORDER BY start, \"end\" ASC\n    `, [task_id])\n\n    return fetchTaskResult?.rows.at(0)\n  }\n\n  static GET_BY_EMPLOYEE_ID = async (employee_id: number, period?: \"weekly\" | \"monthly\" | undefined) => {\n    let filterByPeriodStr: string = ''\n\n    switch (period) {\n      case \"weekly\":\n        filterByPeriodStr = `AND start >= date_trunc('week', current_timestamp) AND start < date_trunc('week', current_timestamp) + interval '1 week'`;\n        break;\n      case \"monthly\":\n        filterByPeriodStr = `AND start >= date_trunc('month', current_timestamp) AND start < date_trunc('month', current_timestamp) + interval '1 month'`\n        break;\n      default:\n        break;\n    }\n\n    const fetchTaskResult = await query<Task>(`\n    SELECT\n      t.id,\n      t.task,\n      u.full_name,\n      t.start,\n      t.\"end\",\n      p.project_name\n    FROM tasks t\n    JOIN users u ON t.user_id=u.id\n    JOIN projects p ON t.project_id=p.id\n    WHERE user_id=$1 \n    ${filterByPeriodStr}\n    ORDER BY start, \"end\" ASC\n    `, [employee_id])\n\n    return fetchTaskResult?.rows || []\n  }\n\n  static STORE = async (user_id: number, tasks: Task[]) => {\n    const q: string[] = [];\n    const params: string[] = [];\n\n    tasks?.forEach((task, index) => {\n      const baseIndex = index * 5;\n      q.push(`($${baseIndex + 1}, $${baseIndex + 2}, $${baseIndex + 3}, $${baseIndex + 4}, $${baseIndex + 5})`);\n\n      params.push(`${task.project_id}`)\n      params.push(`${task.task}`)\n      params.push(`${task.start}`)\n      params.push(`${task.end}`)\n      params.push(`${user_id}`)\n    })\n\n    const queryStr = `INSERT INTO tasks (project_id, task, start, \"end\", user_id) VALUES ` + q.join(', ') + `RETURNING *`;\n\n    const storeTaskResult = await query<Task>(queryStr, params)\n\n    return storeTaskResult?.rows\n  }\n\n  static UPDATE = async (task_id: number, task: Task) => {\n    const updateTaskResult = await query<Task>(`\n    UPDATE tasks\n    SET \n      project_id=$1,\n      task=$2,\n      start=$3,\n      \"end\"=$4,\n      user_id=$5\n    WHERE id=$6\n    RETURNING *\n    `, [task.project_id, task.task, task.start, task.end, task_id])\n\n    return updateTaskResult?.rows.at(0)\n  }\n\n  static DELETE = async (task_id: number) => {\n    await query(`\n    DELETE FROM tasks\n    WHERE id=$1::integer\n    `, [task_id])\n  }\n}\n\nexport default TaskService","import { z } from \"zod\";\n\nconst taskItemSchema = z.object({\n  project_id: z.number()\n    .min(1, { message: \"Project name is required\" }),\n  task: z.string()\n    .min(1, { message: \"Description is required\" }),\n  start: z.string()\n    .min(1, { message: \"Start time is required\" }),\n  end: z.string()\n    .min(1, { message: \"End time is required\" }),\n});\n\nexport const taskDataSchema = z.object({\n  data: z.array(taskItemSchema)\n    .min(1, { message: \"At least one task item is required\" }),\n});","import express from \"express\"\nimport { getProfile, updateProfile } from \"../controller/profile-controller\"\nconst route = express.Router()\n\nroute.get('/', getProfile)\nroute.put('/', updateProfile)\n\nexport default route","import { query } from \"../libs/pg\"\nimport { Employee } from \"../types\"\n\nclass ProfileService {\n  static GET_PROFILE = async (employee_id: number) => {\n    const getProfileResult = await query<Employee>(`\n      SELECT\n        *\n      FROM public.\"users\"\n      WHERE id=$1::integer\n    `, [employee_id])\n\n    return getProfileResult?.rows.at(0)\n  }\n\n  static UPDATE_PROFILE = async (employee_id: number, employee: Employee) => {\n    const updateProfileResult = await query<Employee>(`\n      UPDATE public.\"users\"\n      SET\n        email=$1\n        password=$2\n        full_name=$3\n        username=$4\n        role_id=$5::integer\n        phone=$6\n      WHERE id=$7::integer\n    `, [employee.email, employee.password, employee.full_name, employee.username, employee.role, employee.phone, employee_id])\n\n    return updateProfileResult?.rows.at(0)\n  }\n\n}\n\nexport default ProfileService","import { Request, Response } from \"express\";\nimport { asyncHandler } from \"../helper/async-helper\";\nimport ProfileService from \"../services/profile-service\";\nimport { Employee, ErrorResponse, SuccessResponse } from \"../types\";\n\ntype ProfileResponse<TData> = Response<SuccessResponse<TData> | ErrorResponse>\nconst getProfile = asyncHandler(async (req: Request, res: ProfileResponse<Employee>) => {\n  const user_id = req.user?.id\n\n  if (!user_id) {\n    return res.status(400).json({\n      status: 400,\n      message: `User id is not specified`\n    } as ErrorResponse)\n  }\n\n  const result = await ProfileService.GET_PROFILE(user_id)\n\n  res.status(200).json({\n    status: 200,\n    success: true,\n    data: result\n  })\n})\n\nconst updateProfile = asyncHandler(async (req: Request, res: ProfileResponse<Employee>) => {\n  const user_id = req.user?.id\n\n  if (!user_id) {\n    return res.status(400).json({\n      status: 400,\n      message: `User id is not specified`\n    } as ErrorResponse)\n  }\n\n  const result = await ProfileService.UPDATE_PROFILE(user_id, req.body)\n\n  res.status(200).json({\n    status: 200,\n    success: true,\n    message: `Profile has been succefully updated`,\n    data: result\n  })\n})\n\nexport {\n  getProfile,\n  updateProfile\n}","import express from \"express\"\nimport { getChartData } from \"../controller/chart-controller\"\nconst route = express.Router()\n\nroute.get('/:model', getChartData)\n\nexport default route","import { Request, Response } from \"express\";\nimport { asyncHandler } from \"../helper/async-helper\";\nimport { ErrorResponse, SuccessResponse, Task } from \"../types\";\nimport { StatusCodes } from \"http-status-codes\";\nimport ChartService from \"../services/chart-service\";\n\ntype PieChartResponse = {\n  weeklyHours: number;\n  monthlyHours: number;\n}\n\ntype BarChartResponse = {\n  series: number[],\n  option: string[]\n}\n\n// @desc  Get required data for the bar chart\n// @route GET /api/charts/:model\nexport const getChartData = asyncHandler(async (req: Request, res: Response) => {\n  const user_id = req.user?.id;\n  const model: string = req.params.model;\n\n  if (!user_id) {\n    return res.status(400).json({\n      status: 400,\n      message: `User id is not specified`\n    } as ErrorResponse)\n  }\n\n  let responseData;\n\n  switch (model) {\n    case \"bar\":\n      responseData = await ChartService.GET_DATA(user_id, 'bar');\n      break;\n    case \"pie\":\n      responseData = await ChartService.GET_DATA(user_id, 'pie');\n      break;\n    default:\n      const errorResponse: ErrorResponse = {\n        status: StatusCodes.BAD_REQUEST,\n        message: \"Invalid chart model\"\n      }\n\n      res.status(StatusCodes.BAD_REQUEST).json(errorResponse);\n      return;\n  }\n\n  const successResponse: SuccessResponse<BarChartResponse | PieChartResponse> = {\n    status: StatusCodes.OK,\n    success: true,\n    data: responseData\n  }\n\n  res.status(StatusCodes.OK).json(successResponse);\n})\n\nexport const getDailyWorkingHours = (tasks: Task[]) => {\n  const dailyHours: { [key: string]: number } = {};\n\n  tasks.forEach((task) => {\n    const date = task.start.toLocaleDateString(undefined, {\n      day: \"numeric\",\n      month: \"numeric\",\n      year: \"numeric\"\n    }).split('/').join('-');\n\n    if (!dailyHours[date]) {\n      dailyHours[date] = 0;\n    }\n    dailyHours[date] += calculateWorkingHours(task.start, task.end);\n  });\n\n  const option = Object.keys(dailyHours).sort();\n  const series = option.map(date => dailyHours[date]);\n\n  return { option, series }\n}\n\nconst calculateWorkingHours = (start: Date, end: Date): number => {\n  // if (start >= end) {\n  //   throw new Error('End time must be after start time');\n  // }\n\n  const differenceInMilliseconds = end.getTime() - start.getTime();\n\n  const differenceInHours = differenceInMilliseconds / (1000 * 60 * 60);\n\n  return differenceInHours;\n};","import { getDailyWorkingHours } from \"../controller/chart-controller\";\nimport TaskService from \"./task-service\";\n\nclass ChartService {\n  static GET_DATA = async (employee_id: number, chart_type: 'pie' | 'bar') => {\n    switch (chart_type) {\n      case 'pie':\n        return this.PIE_CHART(employee_id)\n      case 'bar':\n        return this.BAR_CHART(employee_id)\n    }\n  }\n\n  private static PIE_CHART = async (employee_id: number) => {\n    const [monthlyTasks, weeklyTasks] = await Promise.all([\n      TaskService.GET_BY_EMPLOYEE_ID(employee_id, \"monthly\"),\n      TaskService.GET_BY_EMPLOYEE_ID(employee_id, \"weekly\")\n    ]);\n\n    const { series: monthlySeries } = getDailyWorkingHours(monthlyTasks);\n    const { series: weeklySeries } = getDailyWorkingHours(weeklyTasks);\n\n    const weeklyHours = weeklySeries.reduce((series, val) => {\n      return series + val\n    }, 0)\n\n    const monthlyHours = monthlySeries.reduce((series, val) => {\n      return series + val\n    }, 0)\n\n    return { weeklyHours, monthlyHours }\n  }\n\n  private static BAR_CHART = async (employee_id: number) => {\n    const tasks = await TaskService.GET_BY_EMPLOYEE_ID(employee_id, \"weekly\")\n\n    const { series, option } = getDailyWorkingHours(tasks);\n\n    return {\n      option,\n      series\n    }\n  }\n}\n\nexport default ChartService","import express from \"express\"\nimport { login, logout } from \"../controller/auth-controller\"\nconst route = express.Router()\n\nroute.post('/', login);\nroute.post('/logout', logout);\n\nexport default route","import { Request, Response } from \"express\";\nimport { asyncHandler } from \"../helper/async-helper\";\nimport { query } from \"../libs/pg\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { ErrorResponse, Login, SuccessResponse } from \"../types\";\nimport jwt from \"jsonwebtoken\"\nimport AuthService from \"../services/auth-service\";\n\ntype LoginRequest = Request<{}, any, Login>\ntype LoginResponse<TData> = Response<SuccessResponse<TData> | ErrorResponse>\n\n\nexport const login = asyncHandler(async (req: LoginRequest, res: LoginResponse<string>) => {\n  const result = await AuthService.LOGIN(req.body)\n\n  if (result?.rowCount < 1) {\n    const errorResponse: ErrorResponse = {\n      status: StatusCodes.NOT_FOUND,\n      message: \"User with email or password specified, are not found\"\n    }\n    return res.status(StatusCodes.BAD_REQUEST).json(errorResponse)\n  }\n\n  const user = result?.rows.at(0);\n\n  const token = jwt.sign({ user }, 'test', { expiresIn: '1h' })\n\n  res\n    // .cookie(\"access_token\", `${token}`, {\n    //   httpOnly: true,\n    //   secure: false\n    // })\n    .status(StatusCodes.OK).json({\n      status: StatusCodes.OK,\n      success: true,\n      message: \"Login Successfull\",\n      data: token\n    });\n})\n\nexport const logout = (req: LoginRequest, res: LoginResponse<undefined>) => {\n  return res\n    .clearCookie(\"access_token\")\n    .status(StatusCodes.OK)\n    .json({\n      status: StatusCodes.OK,\n      success: true,\n      message: \"Logout Successfull\",\n    });\n};","import { query } from \"../libs/pg\"\nimport { Employee, Login } from \"../types\"\n\nclass AuthService {\n  static LOGIN = async (loginRequest: Login) => {\n    const loginResult = await query<Employee>(`\n      SELECT \n        u.id, \n        u.email, \n        u.full_name, \n        u.username, \n        u.phone,\n        r.role_name, \n        r.display_name\n      FROM \n        public.\"users\" u\n      JOIN \n        roles r ON u.role_id = r.id\n      WHERE \n        u.email=$1 AND u.password=$2\n    `, [loginRequest.email, loginRequest.password])\n\n    return loginResult\n  }\n}\n\nexport default AuthService","import express from \"express\"\nimport { approveAbsenceData, createNewAbsence, deleteAbsence, getAbsenceData, getAbsenceDataTest } from \"../controller/absence-controller\";\nimport { validateData } from \"../middleware/validation-middleware\";\nimport { absenceApprovalSchema, absenceSchema } from \"../schema/absence-schema\";\nconst route = express.Router();\n\nroute.get(\"/\", getAbsenceData)\nroute.get(\"/history\", getAbsenceDataTest)\nroute.post(\"/\", validateData(absenceSchema), createNewAbsence)\nroute.put('/:absence_id', validateData(absenceApprovalSchema), approveAbsenceData)\nroute.delete('/:absence_id', deleteAbsence)\n\nexport default route;\n","import { NextFunction, Request, Response } from \"express\";\nimport { asyncHandler } from \"../helper/async-helper\";\nimport { Absence, ErrorResponse, SuccessResponse } from \"../types\";\nimport { query } from \"../libs/pg\";\nimport { StatusCodes } from \"http-status-codes\";\nimport AbsenceService from \"../services/absence-service\";\n\ntype AbsenceItem = {\n  user_id?: number;\n  name?: string;\n  absences: Absence[]\n}\n\ntype AbsenceRequest = Request<{}, any, {\n  user_id: number;\n  date: Date;\n  type: 'WFH' | 'AL' | 'SL';\n}>\n\ntype AbsenceResponse<TData> = Response<SuccessResponse<TData> | ErrorResponse>\n\ntype ApprovalDetails = {\n  isApprovedByTeamLeader: boolean;\n  date: Date;\n} | {\n  isApprovedByHr: boolean;\n  date: Date;\n};\n\ntype MutatedResult = {\n  absenceId: number;\n  absenceRequestedDate: Date;\n  approvalStatus: boolean;\n  approvalDetails: ApprovalDetails[];\n  reason?: string;\n};\n\n// @desc  Get all absence for all user\n// @route GET /api/absences\nconst getAbsenceData = asyncHandler(async (req: AbsenceRequest, res: AbsenceResponse<any>) => {\n  const user_id = req.user?.id\n\n  const result = await AbsenceService.GET_ALL()\n  // const result = await AbsenceService.GET_BY_EMPLOYEE_ID(user_id)\n\n  res.status(200).json({\n    status: StatusCodes.OK,\n    success: true,\n    data: result\n  })\n});\n\nconst getAbsenceDataTest = asyncHandler(async (req: AbsenceRequest, res: AbsenceResponse<any>) => {\n  const user_id = req.user?.id\n\n  if (!user_id) {\n    return res.status(400).json({\n      status: 400,\n      message: `User id is not specified`\n    } as ErrorResponse)\n  }\n\n  // const result = await AbsenceService.GET_ALL()\n  const result = await AbsenceService.GET_BY_EMPLOYEE_ID(user_id)\n\n  const mutated_result: MutatedResult[] = result.map((absence: Absence) => ({\n    absenceId: absence.id,\n    absenceRequestedDate: absence.date,\n    approvalStatus: absence.is_approved,\n    approvalDetails: [\n      {\n        isApprovedByTeamLeader: absence.date_team_lead_approved ? true : null,\n        date: absence.date_team_lead_approved ? absence.date_team_lead_approved : null,\n      },\n      {\n        isApprovedByHr: absence.date_hr_approved ? true : null,\n        date: absence.date_hr_approved ? absence.date_hr_approved : null,\n      },\n    ],\n    reason: absence.reason || null, // Handle the reason field\n  }))\n\n  res.status(200).json({\n    status: StatusCodes.OK,\n    success: true,\n    data: result\n  })\n});\n\n// @desc  Add new absence data\n// @route POST /api/absences\nconst createNewAbsence = asyncHandler(async (req: AbsenceRequest, res: AbsenceResponse<AbsenceItem>) => {\n  const { user_id, date, type } = req.body\n\n  const validationError = await validateAbsenceRequest(Number(user_id), date, type)\n  if (validationError) {\n    return res.status(400).json({\n      status: 400,\n      message: validationError\n    } as ErrorResponse)\n  }\n\n  const result = await AbsenceService.STORE(req.body)\n\n  res.json({\n    status: StatusCodes.CREATED,\n    success: true,\n    message: \"Absence data has been created successfully\",\n    data: result\n  })\n})\n\n// @desc  Approve an absence data\n// @route PUT /api/absences/:absence_id\nconst approveAbsenceData = asyncHandler(async (req: Request<{ absence_id: number }, any, { is_approved: boolean, reason?: string }>, res: AbsenceResponse<any>) => {\n  const absence = {\n    is_approved: Boolean(req.body.is_approved),\n    reason: req.body.reason\n  }\n  const absence_id = Number(req.params.absence_id)\n\n\n  const result = await AbsenceService.UPDATE_STATUS(absence_id, absence)\n\n  res.json({\n    status: StatusCodes.OK,\n    success: true,\n    message: `Absence data has been akwaokwao`,\n    data: result\n  })\n})\n\nconst deleteAbsence = asyncHandler(async (req: Request, res: Response) => {\n  const absence_id = Number(req.params.absence_id);\n\n  await AbsenceService.DELETE(absence_id)\n\n  res.json({\n    status: StatusCodes.OK,\n    success: true,\n    message: `The absence has been deleted/canceled`,\n  })\n})\n\nconst validateAbsenceRequest = async (\n  user_id: number,\n  date: Date,\n  type: 'WFH' | 'AL' | 'SL'\n) => {\n  const today = new Date()\n  const requestDate = new Date(date)\n  const options = { day: 'numeric', month: 'short', year: 'numeric' };\n\n  const checkQuery = `\n    SELECT\n      COUNT(*) AS count,\n      SUM(CASE WHEN type = 'WFH' THEN 1 ELSE 0 END) AS wfh_count,\n      SUM(CASE WHEN type IN ('AL', 'SL') THEN 1 ELSE 0 END) AS al_sl_count\n    FROM absences\n    WHERE user_id = $1\n      AND date >= date_trunc('day', $2::timestamp)\n      AND date < date_trunc('day', $2::timestamp) + interval '1 day'\n  `;\n\n  const checkQueryResult = await query<{\n    count: number;\n    wfh_count: number;\n    al_sl_count: number;\n  }>(checkQuery, [user_id, date]);\n\n  const { count, wfh_count, al_sl_count } = checkQueryResult.rows[0];\n\n  if (count > 0) {\n    return `You already applied ${type} on ${requestDate.toLocaleDateString(undefined, options).split('/').join('-')}`;\n  }\n\n  if (type === 'WFH' && wfh_count >= 3) {\n    return `You have already reached the WFH limit for this week.`;\n  }\n\n  if (type === 'AL' || type === 'SL') {\n    const checkYearlyLimitQuery = `\n      SELECT COUNT(*)\n      FROM absences\n      WHERE user_id = $1\n        AND date >= date_trunc('year', current_timestamp)\n        AND date < date_trunc('year', current_timestamp) + interval '1 year'\n        AND type IN ('AL', 'SL')\n    `;\n    const yearlyLimitResult = await query<{ count: number }>(checkYearlyLimitQuery, [user_id]);\n\n    if (yearlyLimitResult.rows[0].count >= 12) {\n      return `You have reached the annual limit of 12 AL and SL leaves.`;\n    }\n  }\n\n  const dayOfWeek = requestDate.getDay();\n  if ((dayOfWeek === 6) || (dayOfWeek === 0)) {\n    return `You cannot take leaves at weekend`\n  }\n\n  return null\n}\n\nexport {\n  getAbsenceData,\n  getAbsenceDataTest,\n  createNewAbsence,\n  approveAbsenceData,\n  deleteAbsence,\n} ","import { query } from \"../libs/pg\"\nimport { Absence } from \"../types\";\n\nclass AbsenceService {\n  static GET_ALL = async () => {\n    const fetchAbsenceResult = await query<any>(`\n    SELECT\n        u.id AS user_id,\n        u.full_name AS name,\n        ARRAY_AGG(\n            JSON_BUILD_OBJECT(\n                'date', a.date,\n                'type', a.type,\n                'reason', a.reason\n            )\n        ) AS absences\n    FROM absences a\n    JOIN users u ON a.user_id = u.id\n    GROUP BY u.id, u.full_name\n    ORDER BY u.id;\n    `);\n\n    return fetchAbsenceResult?.rows || [];\n  }\n\n  static GET_BY_ID = async (employee_id: number): Promise<Absence> => {\n    const fetchAbsenceResult = await query<Absence>(`\n    SELECT\n       *\n    FROM absences a\n    WHERE id=$1\n    `, [employee_id]);\n\n    return fetchAbsenceResult?.rows.at(0);\n  }\n\n  static GET_BY_EMPLOYEE_ID = async (employee_id: number) => {\n    const fetchAbsenceResult = await query<any>(`\n    SELECT\n      id,\n      user_id,\n      date,\n      type,\n      date_team_lead_approved,\n      date_hr_approved,\n      is_approved,\n      reason\n    FROM absences\n    WHERE user_id = $1::integer\n    `, [employee_id]);\n\n    return fetchAbsenceResult?.rows || [];\n  }\n\n  static STORE = async (absence: Absence) => {\n    const saveAbsenceResult = await query<Absence>(`\n    INSERT INTO absences (\n      user_id, \n      date, \n      type,\n      date_pending\n    ) VALUES ($1::integer, $2, $3, NOW()) \n    RETURNING *\n    `, [absence.user_id, absence.date, absence.type]);\n\n    return saveAbsenceResult?.rows.at(0)\n  }\n\n  static DELETE = async (absence_id: number) => {\n    await query(`\n    DELETE FROM absences\n    WHERE id=$1::integer\n    `, [absence_id])\n  }\n\n  static UPDATE_STATUS = async (absence_id: number, approval: {\n    is_approved: boolean;\n    reason?: string\n  }) => {\n    const absence = await this.GET_BY_ID(absence_id);\n    if (!absence) {\n      throw new Error(`Absence with ID ${absence_id} not found.`);\n    }\n\n    let sql = `UPDATE absences SET `;\n    const params: any[] = [];\n    let updateField = '';\n\n    if (approval.is_approved) {\n      if (!absence.date_pending) {\n        updateField = 'date_pending = NOW()';\n      } else if (!absence.date_team_lead_approved) {\n        updateField = 'date_team_lead_approved = NOW()';\n      } else if (!absence.date_hr_approved) {\n        updateField = 'date_hr_approved = NOW(), is_approved = TRUE';\n      }\n\n      if (!updateField) {\n        return { message: \"All fields are already set.\" };\n      }\n\n      sql += `${updateField} WHERE id = $1 RETURNING *`;\n    } else {\n      sql += `is_approved = FALSE`;\n      if (approval.reason) {\n        sql += `, reason = $1`;\n        params.push(approval.reason);\n      }\n      sql += ` WHERE id = $2 RETURNING *`;\n    }\n    params.push(absence_id);\n\n    const updateResult = await query<Absence>(sql, params);\n\n    return updateResult?.rows.at(0);\n  }\n}\n\nexport default AbsenceService","import { z } from \"zod\";\n\nconst absenceSchema = z.object({\n  user_id: z.number().min(1, { message: \"User ID is required\" }),\n  date: z.string()\n    .min(1, { message: \"Start time is required\" }),\n  type: z.enum([\n    'WFH', 'AL', 'SL'\n  ], { message: \"Type not match!! The only accepted value are 'WFH', 'AL', 'SL'\" })\n})\n\nconst absenceApprovalSchema = z.object({\n  is_approved: z.boolean({ message: \"Type not match!! The only accepted value are 'approved' and 'declined'\" }),\n  reason: z.string().optional(),\n}).refine(data => {\n  if (!data.is_approved && (!data.reason || data.reason.trim() === '')) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Reason is required when is_approved is 'declined'\",\n  path: [\"reason\"],\n});\n\n\nexport { absenceSchema, absenceApprovalSchema };","import express from \"express\"\nimport { createNewProject, deleteProject, getAllProject, getProjectById, updateProject } from \"../controller/project-controller\";\nconst route = express.Router();\n\nroute.get('/', getAllProject)\nroute.get('/:project_id', getProjectById)\nroute.post('/', createNewProject)\nroute.put('/:project_id', updateProject)\nroute.delete('/:project_id', deleteProject)\n\nexport default route;","import { Request, Response } from \"express\";\nimport { asyncHandler } from \"../helper/async-helper\";\nimport { ErrorResponse, Project, SuccessResponse } from \"../types\";\nimport { query } from \"../libs/pg\";\nimport { StatusCodes } from \"http-status-codes\";\nimport ProjectService from \"../services/project-service\";\n\n\ntype ProjectResponse<TData> = Response<SuccessResponse<TData> | ErrorResponse>\ntype ProjectRequest = Request<{ project_id?: number }, any, {\n  project_name: string;\n}>\n\nconst getAllProject = asyncHandler(async (req: ProjectRequest, res: ProjectResponse<Project[]>) => {\n  const result = await ProjectService.GET_ALL()\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    data: result\n  })\n})\n\nconst getProjectById = asyncHandler(async (req: ProjectRequest, res: ProjectResponse<Project>) => {\n  const project_id = Number(req.params.project_id);\n\n  if (!project_id) {\n    const response: ErrorResponse = {\n      status: StatusCodes.BAD_REQUEST,\n      message: \"Project ID not specified\"\n    }\n\n    return res.status(StatusCodes.BAD_REQUEST).json(response)\n  }\n\n  const result = await ProjectService.GET_BY_ID(project_id)\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    data: result\n  })\n})\n\nconst createNewProject = asyncHandler(async (req: ProjectRequest, res: ProjectResponse<Project>) => {\n  const result = ProjectService.STORE(req.body)\n\n  res.status(StatusCodes.CREATED).json({\n    status: StatusCodes.CREATED,\n    success: true,\n    message: `New project successfully created`,\n    data: result\n  })\n})\n\nconst updateProject = asyncHandler(async (req: ProjectRequest, res: ProjectResponse<Project>) => {\n  const project_id = Number(req.params.project_id);\n\n  const result = await ProjectService.UPDATE(project_id, req.body)\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    message: `Project with ID ${project_id} has been updated`,\n    data: result\n  })\n})\n\nconst deleteProject = asyncHandler(async (req: ProjectRequest, res: ProjectResponse<null>) => {\n  const project_id = Number(req.params.project_id);\n\n  ProjectService.DELETE(project_id)\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    message: `Project with ID ${project_id} has been deleted`,\n  })\n})\n\n\nexport {\n  getAllProject,\n  getProjectById,\n  createNewProject,\n  updateProject,\n  deleteProject\n}","import { query } from \"../libs/pg\"\nimport { Project } from \"../types\"\n\nclass ProjectService {\n  static GET_ALL = async (): Promise<Project[]> => {\n    const fetchProjectResult = await query<Project>(`\n    SELECT \n      * \n    FROM projects \n    ORDER BY project_name\n    `)\n\n    return fetchProjectResult?.rows || []\n  }\n\n  static GET_BY_ID = async (project_id: number): Promise<Project | undefined> => {\n    const fetchProjectByIdResult = await query<Project>(`\n    SELECT \n      *\n    FROM projects\n    WHERE id=$1::integer\n    `, [project_id])\n\n    return fetchProjectByIdResult?.rows.at(0)\n  }\n\n  static STORE = async (project: Project): Promise<Project | undefined> => {\n    const storeProjectResult = await query<Project>(`\n    INSERT INTO projects (\n      project_name\n    ) VALUES ($1)\n    RETURNING *\n    `, [project.project_name])\n\n    return storeProjectResult?.rows.at(0)\n  }\n\n  static UPDATE = async (project_id: number, project: Project): Promise<Project | undefined> => {\n    const updateProjectResult = await query<Project>(`\n      UPDATE projects\n      SET\n        project_name=$1\n      WHERE id=$2::integer\n      RETURNING *\n    `, [project.project_name, project_id])\n\n    return updateProjectResult?.rows.at(0)\n  }\n\n  static DELETE = async (project_id: number): Promise<void> => {\n    await query(`\n      DELETE FROM projects\n      WHERE id=$1::integer\n    `, [project_id])\n  }\n}\n\nexport default ProjectService","import express from \"express\"\nimport { createNewRole, deleteRole, getAllRole, getRoleById, updateRole } from \"../controller/role-controller\";\nconst route = express.Router();\n\nroute.get('/', getAllRole)\nroute.get('/:role_id', getRoleById)\nroute.post('/', createNewRole)\nroute.put('/:role_id', updateRole)\nroute.delete('/:role_id', deleteRole)\n\nexport default route;","import { Request, Response } from \"express\";\nimport { asyncHandler } from \"../helper/async-helper\";\nimport { ErrorResponse, Role, SuccessResponse } from \"../types\";\nimport { StatusCodes } from \"http-status-codes\";\nimport RoleService from \"../services/role-service\";\n// import RoleService from \"../services/role-service\";\n\ntype RoleResponse<TData> = Response<SuccessResponse<TData> | ErrorResponse>\ntype RoleRequest = Request<{ role_id?: number }, any, {\n  display_name: string;\n  role_name: string;\n}>\n\nconst getAllRole = asyncHandler(async (req: RoleRequest, res: RoleResponse<Role[]>) => {\n  const result = await RoleService.GET_ALL()\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    data: result\n  })\n})\n\nconst getRoleById = asyncHandler(async (req: RoleRequest, res: RoleResponse<Role>) => {\n  const role_id = Number(req.params.role_id);\n\n  if (!role_id) {\n    const response: ErrorResponse = {\n      status: StatusCodes.BAD_REQUEST,\n      message: \"Role ID not specified\"\n    }\n\n    return res.status(StatusCodes.BAD_REQUEST).json(response)\n  }\n\n  const result = await RoleService.GET_BY_ID(role_id)\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    data: result\n  })\n})\n\nconst createNewRole = asyncHandler(async (req: RoleRequest, res: RoleResponse<Role>) => {\n  const result = RoleService.STORE(req.body)\n\n  res.status(StatusCodes.CREATED).json({\n    status: StatusCodes.CREATED,\n    success: true,\n    message: `New role successfully created`,\n    data: result\n  })\n})\n\nconst updateRole = asyncHandler(async (req: RoleRequest, res: RoleResponse<Role>) => {\n  const role_id = Number(req.params.role_id);\n\n  const result = RoleService.UPDATE(\n    role_id,\n    req.body\n  )\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    message: `Role with ID ${role_id} has been updated`,\n    data: result\n  })\n})\n\nconst deleteRole = asyncHandler(async (req: RoleRequest, res: RoleResponse<null>) => {\n  const role_id = Number(req.params.role_id);\n\n  RoleService.DELETE(role_id)\n\n  res.status(StatusCodes.OK).json({\n    status: StatusCodes.OK,\n    success: true,\n    message: `Role with ID ${role_id} has been deleted`,\n  })\n})\n\n\nexport {\n  getAllRole,\n  getRoleById,\n  createNewRole,\n  updateRole,\n  deleteRole\n}","import { query } from \"../libs/pg\";\nimport { Role } from \"../types\";\n\nclass RoleService {\n  static GET_ALL = async (): Promise<Role[]> => {\n    const fethAllRoleResult = await query<Role>(`\n    SELECT \n      *\n    FROM roles\n    SORT BY role_name\n    `)\n\n    return fethAllRoleResult?.rows || []\n  }\n\n  static GET_BY_ID = async (role_id: number) => {\n    const fetchRoleById = await query<Role>(`\n    SELECT\n      role_name,\n      display_name\n    FROM roles\n    WHERE id=$1::integer\n    `, [role_id])\n\n    return fetchRoleById?.rows.at(0)\n  }\n\n  static STORE = async (role: Role) => {\n    const storeRoleResult = await query<Role>(`\n    INSERT INTO roles (\n      role_name,\n      display_name\n    ) VALUES ($1, $2)\n    RETURNING *\n    `, [role.role_name, role.display_name])\n\n    return storeRoleResult?.rows.at(0)\n  }\n\n  static UPDATE = async (role_id: number, role: Role) => {\n    const updateRoleResult = await query(`\n    UPDATE roles\n    SET\n      role_name=$1,\n      display_name=$2\n    WHERE id=$3\n    RETURNING *\n    `, [role.role_name, role.display_name, role_id])\n\n    return updateRoleResult?.rows.at(0)\n  }\n\n  static DELETE = async (role_id: number): Promise<void> => {\n    const deleteRoleResult = await query(`\n    DELETE roles\n    WHERE id=$1\n    `, [role_id])\n  }\n}\n\nexport default RoleService"],"mappings":"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","names":["exports","module","exports","module","exports","module","cors","import_express","import_http_status_codes","jwt","import_http_status_codes","import_http_status_codes","import_zod","express","import_express","import_http_status_codes","import_zod","route","express","import_express","route","express","import_express","import_http_status_codes","route","express","import_express","import_http_status_codes","import_jsonwebtoken","jwt","route","express","import_express","import_http_status_codes","import_zod","route","express","import_express","import_http_status_codes","route","express","import_express","import_http_status_codes","route","express","asyncHandler","express","cookieParser","helmet","cors"]}